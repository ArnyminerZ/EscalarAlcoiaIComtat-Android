plugins {
    id('com.android.application')
    id('kotlin-android')
    id('com.google.gms.google-services')
    id('com.google.firebase.crashlytics')
    id('com.google.firebase.firebase-perf')
    id('org.jetbrains.dokka')
    id('com.google.android.secrets-gradle-plugin') version '1.1.0'
}

apply from: './version.gradle'

android {
    namespace 'com.arnyminerz.escalaralcoiaicomtat'

    // Android Build Settings
    compileSdk 33
    buildToolsVersion "33.0.0"
    defaultConfig {
        applicationId "com.arnyminerz.escalaralcoiaicomtat"
        minSdk 24
        targetSdk 33
        versionCode findProperty("android.versionCode") as Integer
        versionName VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Sets the supported languages
        resConfigs 'en', 'US', 'ca', 'es'

        vectorDrawables {
            useSupportLibrary true
        }
    }

    // Configures the APK and AAB signing config
    signingConfigs {
        release {
            def props = new Properties()
            file("${rootDir}/local.properties").withInputStream { props.load(it) }

            storeFile file("keystore.jks")
            storePassword props.getProperty("SIGNING_KEYSTORE_PASSWORD")
            keyAlias props.getProperty("SIGNING_KEY_ALIAS")
            keyPassword props.getProperty("SIGNING_KEY_PASSWORD")
        }
    }

    // Configures the different build variants
    buildTypes {
        release {
            // Apply the proguard rules
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // Change the file name
            setProperty("archivesBaseName", "EscalarAlcoiaIComtat-${android.defaultConfig.versionCode}-${android.defaultConfig.versionName}")
            // Set the signing keys
            signingConfig signingConfigs.release
            // Enable minifying
            minifyEnabled true

            // Set the debug symbol level
            ndk.debugSymbolLevel = 'FULL'
        }
        debug {
            // Add the date as a suffix to the version name
            versionNameSuffix "-debug-build" + getDate()
            // Rename the output file
            setProperty("archivesBaseName", "EscalarAlcoiaIComtat")

            // Disable mapping file upload for Crashlytics
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }

            minifyEnabled false
        }
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += [
                '-Xjvm-default=all',
                // Allow experimental
                '-opt-in=kotlin.RequiresOptIn'
        ]
        // useIR = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES']
        }
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_compiler_version
    }
}

tasks.named("dokkaHtmlPartial") {
    dokkaSourceSets {
        configureEach {
            noAndroidSdkLink.set(false)
        }
    }
}

android.applicationVariants.all { variant ->
    if (variant.buildType.name == "release") {
        variant.assemble.doLast {
            // This increases version code on release
            def versionPropsFile = file("../gradle.properties")
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            def code = versionProps['android.versionCode'].toInteger() + 1
            versionProps['android.versionCode'] = code.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
            logger.lifecycle("Increased version code to $code")
        }
    }
}

secrets {
    propertiesFileName 'local.properties'

    ignoreList.add("SIGNING_KEYSTORE_PASSWORD")
    ignoreList.add("SIGNING_KEY_ALIAS")
    ignoreList.add("SIGNING_KEY_PASSWORD")
}

configurations {
    all {
        exclude module: 'httpclient'
        exclude module: 'commons-logging'
    }
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // AndroidX dependencies
    implementation 'androidx.appcompat:appcompat:1.6.0-rc01'
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation "androidx.startup:startup-runtime:1.1.1"
    implementation 'androidx.paging:paging-runtime-ktx:3.1.1'

    // GUI libraries
    implementation 'com.google.android.material:material:1.8.0-rc01'

    // Core Module
    implementation project(":core")

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'org.mockito:mockito-core:4.11.0'
    androidTestImplementation 'org.mockito.kotlin:mockito-kotlin:4.1.0'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    // Kotlin reflect for using methods from Feature Modules
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}
